/*
    Default Button Style Component
    Also .expanded
*/

/* 
  Actual button 
*/
button {
  cursor: pointer;
  border-style: none;
  background: none;
  font-size: inherit;
  font-family: inherit;
  color: inherit; /* default in Webkit/Blink is blue, others black. normalise by inheriting the colour from parent element */
}

button:focus {
  outline: 2px solid $heritage-green;
  outline-offset: 4px;
}

/* 
  Default .button
*/
.button {
  background-color: $heritage-green;
  color: $white;
  text-decoration: none;
  border: 4px solid transparent;
  cursor: pointer;
  display: inline-block;
  font-family: $body-font-family !important;
  font-size: 1.25rem;
  text-align: center;
  line-height: 1.6;
  padding: map-get($button-padding-list, default);
  font-weight: bold;
  margin-top: 1rem;
  margin-bottom: 1rem;
  min-width: 14rem;

  transition: all 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);

  &:hover {
    background-color: $white;
    border: 4px solid $heritage-green;
    color: $heritage-green;
  }

  a {
    color: $white;
  }

  // Padding
  @each $size, $value in map-remove($button-padding-list, default) {
    &.#{$size} {
      padding: $value;
    }
  }

  &:after {
    // content: "\e97b";
    // font-family: "uos";
    // margin: 0 0 0 10px;
    // position: relative;
    content: var(--icon-chevron-right);
    width: 24px;
    height: 24px;
    position: relative;
    right: -4px;
    top: 5px;
    display: inline-block;
    color: #ffff;
  }

  &::after {
    filter: brightness(0) invert(1);
  }

  &:hover::after {
    filter: icon-filter($heritage-green);
  }

  &.no-arrow:after {
    content: none;
    margin: 0;
  }

  &.tiny {
    padding: 1.1em 1em;
    font-size: 0.875rem;

    &:after {
      width: 16px;
      height: 16px;
      top: 3px;
    }
  }

  &.small {
    padding: 1.1em 1em;
    font-size: 1rem;

    &:after {
      width: 20px;
      height: 20px;
      top: 4px;
    }
  }

  &.button-gap--right {
    margin-right: 30px;
  }

  &.button-gap--right:last-child {
    margin-right: 0;
  }

  &.button-gap--left {
    margin-left: 30px;
  }

  &.button-gap--left:last-child {
    margin-left: 0;
  }

  /*
        Button Colors - this will handle each color variation (e.g. heritage-green, enery-pink, ...)
  */

  @each $name, $color in $button-palette {
    &.#{$name} {
      background-color: $color;
      border-color: $color;
      color: #ffffff;

      &:hover {
        background-color: #ffffff;
        border-color: $color;
        color: $color;

        &::after {
          filter: icon-filter($color);
        }
      }
    }
  }

  &.hollow {
    background: transparent;
    color: $heritage-green;
    border: 1px solid $heritage-green;

    &::after {
      filter: icon-filter($heritage-green);
    }

    &:hover {
      background-color: transparent;
      border: 1px solid tint($heritage-green, 50%);
    }

    &:focus {
      background-color: transparent;
      color: $heritage-green;
    }
  }

  @each $name, $color in $button-palette {
    &.#{$name} {
      &.hollow {
        background: transparent;
        color: $color;
        border: 1px solid $color;

        &::after {
          filter: icon-filter($color);
        }

        &:hover {
          background-color: transparent;
          border: 1px solid tint($color, 50%);
        }

        &:focus {
          background-color: transparent;
          color: $color;
        }
      }
    }
  }

  /* 
    BRAND 2025 Tinted style buttons 
  */

  @each $name, $color in $uos-colour-group-palette {
    &.#{$name} {
      &.tinted {
        background-color: map-get($color, "tint");
        border-color: map-get($color, "tint");
        color: map-get($color, "dark");

        &::after {
          filter: icon-filter(map-get($color, "dark"));
        }

        &:hover {
          background-color: #ffffff;
        }
      }
    }
  }

  // overrides for the tinted buttons
  &.tinted {
    &.pinks {
      background-color: $pink-tint-40;
      border-color: $pink-tint-40;
    }
  }

  &.clear {
    border-color: transparent;
    background-color: transparent;
    color: $heritage-green;
  }

  &.subtle {
    background-color: #e5f1f2; // energy teal very light
    color: $heritage-green;

    &:hover {
      border-bottom-color: transparent;
      color: $black;
    }
  }

  &.energy:hover {
    color: $heritage-green;
  }

  &.energy-green:hover {
    color: $heritage-green;
  }

  &.energy-turq {
    color: $white;
  }

  &.expanded {
    width: 100%;
  }
}

/* 
    Button variations
 */

// Back
.button--back {
  &:before {
    //content: "\e97a";
    //font-family: "uos";
    //margin: 0 10px 0 0;
    content: var(--icon-chevron-left);
    position: relative;
    width: 24px;
    height: 24px;
    right: 4px;
    top: 5px;
    display: inline-block;
  }

  &:before {
    filter: brightness(0) invert(1);
  }

  &:hover:before {
    filter: icon-filter($heritage-green);
  }

  &:after {
    content: "";
  }
}

// Mobile navigation - replace with utility class
.button--left-align {
  text-align: left;
}

// outline ghost style
.button.outine-button {
  background: transparent;
  border: 2px solid $heritage-green;
  color: $heritage-green;

  &::after {
    filter: icon-filter($heritage-green);
  }

  &:hover {
    background-color: transparent;
    border: 2px solid tint($heritage-green, 50%);
  }

  &:focus {
    background-color: transparent;
    color: $heritage-green;
  }
}

/* 
    Overides for white--all
 */

.u-white--all .button,
.darkmode .button {
  background-color: transparent;
  border-color: #fff;

  &.hollow {
    border-width: 1px;
  }

  &:hover {
    background-color: transparent;
    color: #fff;
    border-color: rgba(255, 255, 255, 0.5);
  }

  &:focus {
    background-color: transparent;
  }

  &::after {
    filter: brightness(0) invert(1);
  }

  &:hover::after {
    filter: brightness(0) invert(1);
  }
}

.u-white--all.button:hover {
  background-color: $heritage-green;
  opacity: 0.9;
}

.u-white--all.button.heritage-berry:hover {
  background-color: $heritage-berry;
}

.u-white--all button:focus {
  outline: 1px solid $white;
}

/* 
    label/input[type=radio|checkbox] combos that should display as buttons
    also, they should show a selected state when :checked
*/

label.button {
  margin: 0;
}
input:checked {
  + label.button {
    background-color: darken($primary-color, 5%);
    @each $name, $color in $button-palette {
      // all the colors e.g. <label... class="button energy-green">
      &.#{$name} {
        background-color: darken($color, 5%);
      }
    }
  }
}

/* 
    Button style that can have a icomoon span icon in it 
    Only used on virtual tour at the moment
*/

.button-icon span[class^="uos-"] {
  font-size: 25px;
  margin-right: 5px;
  position: relative;
  top: 5px;
}

[data-hotline][aria-hidden] {
  display: none;
}

/*
    Sticky Button Component
    Should rename c-button-sticky?
*/

.button.u-sticky {
  display: block;
  width: 87%;
  font-size: 1.25rem;
  padding: 1em;
  text-align: center;
  transition: 0.2s width ease-in, 0.1s transform linear;

  &[data-offset=""] {
    margin-bottom: 3rem; /* non-offset buttons need a bottom margin */
  }

  &[data-hotline] {
    &[aria-hidden] {
      display: none;
    }
  }
  &.stuck {
    width: 100%;
  }
  &:hover {
    background-color: $white;
    border-color: $heritage-green;
    color: $heritage-green;
    a {
      color: $heritage-green;
    }
  }
  &.energy-pink {
    color: #fff;
    font-weight: bold;
    a {
      color: #fff;
    }
    &:hover {
      background-color: #fff;
      color: $energy-pink;
      a {
        color: $energy-pink;
      }
    }
  }
  &.energy-green {
    /* The green sticky button classes may be applied to the <a> or a surrounding wrapper e.g. <div> */
    /* so the selectors here are a bit more specific to ensure the cascade/specificity */
    /* is correct and we get the right hover colours for wrapped sticky buttons (i.e. Clearing) */
    //color: #3a3c39;
    font-weight: bold;
    a {
      color: #fff;
    }
    &:hover {
      color: $heritage-green; // #67a51e; //was set to #67a51e;
      a {
        color: $heritage-green; // #67a51e; // was set to #67a51e;
      }
    }
  }

  &.energy-turq {
    background-color: $energy-turq;
    color: #fff;
    a {
      color: #fff;
    }

    &:hover {
      background-color: #fff;
      color: $energy-turq;
      border: 2px solid $energy-turq;
      a {
        color: $energy-turq;
      }
    }
  }
  &.energy-purple {
    background-color: $energy-purple;
    color: #fff;
    a {
      color: #fff;
    }

    &:hover {
      background-color: #fff;
      color: $energy-purple;
      border-color: $energy-purple;
      a {
        color: $energy-purple;
      }
    }
  }
  &.heritage-purple {
    background-color: $heritage-purple;
    color: #fff;
    a {
      color: #fff;
    }

    &:hover {
      background-color: #fff;
      color: $heritage-purple;
      border-color: $heritage-purple;
      a {
        color: $heritage-purple;
      }
    }
  }

  &.u-sticky__small {
    width: 77%;
  }

  &.u-sticky__small.u-sticky.stuck {
    width: 77%;
  }
}

/*
    Responsive amends
*/

@include breakpoint(medium down) {
  .button {
    font-size: 1.125rem; // 18px;
  }

  .button.x-large {
    padding: 18px;
  }
}

@include breakpoint(medium up) {
  .button.u-sticky {
    &.u-sticky__small {
      width: 50%;
    }

    &.u-sticky__small.u-sticky.stuck {
      width: 50%;
    }
  }
}

@include breakpoint(large up) {
  a.button.u-sticky {
    font-size: 1.5rem;
    padding: 1.5em;
  }
}

@include breakpoint(xxlarge up) {
  .button.u-sticky {
    width: 76.5625rem; /* match grid containr i.e. 77.5rem-0.9375rem */
  }
}

.btn-global-search {
  border: 0;
}
